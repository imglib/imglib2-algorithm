/*
 * #%L
 * ImgLib2: a general-purpose, multidimensional image processing library.
 * %%
 * Copyright (C) 2009 - 2023 Tobias Pietzsch, Stephan Preibisch, Stephan Saalfeld,
 * John Bogovic, Albert Cardona, Barry DeZonia, Christian Dietz, Jan Funke,
 * Aivar Grislis, Jonathan Hale, Grant Harris, Stefan Helfrich, Mark Hiner,
 * Martin Horn, Steffen Jaensch, Lee Kamentsky, Larry Lindsey, Melissa Linkert,
 * Mark Longair, Brian Northan, Nick Perry, Curtis Rueden, Johannes Schindelin,
 * Jean-Yves Tinevez and Michael Zinsmaier.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */
package net.imglib2.algorithm.blocks.util;

import net.imglib2.type.NativeType;

/*
 * This is autogenerated source code -- DO NOT EDIT. Instead, edit the
 * corresponding template in templates/ and rerun bin/generate.groovy.
 */

/**
 * Enumerates unary operator types corresponding to mappings between the
 * standard {@code RealType}s, that is, every combination of {@link
 * OperandType}s.
 */
public enum UnaryOperatorType
{
    I8_TO_I8, I8_TO_U8, I8_TO_I16, I8_TO_U16, I8_TO_I32, I8_TO_U32, I8_TO_I64, I8_TO_F32, I8_TO_F64, 
    U8_TO_I8, U8_TO_U8, U8_TO_I16, U8_TO_U16, U8_TO_I32, U8_TO_U32, U8_TO_I64, U8_TO_F32, U8_TO_F64, 
    I16_TO_I8, I16_TO_U8, I16_TO_I16, I16_TO_U16, I16_TO_I32, I16_TO_U32, I16_TO_I64, I16_TO_F32, I16_TO_F64, 
    U16_TO_I8, U16_TO_U8, U16_TO_I16, U16_TO_U16, U16_TO_I32, U16_TO_U32, U16_TO_I64, U16_TO_F32, U16_TO_F64, 
    I32_TO_I8, I32_TO_U8, I32_TO_I16, I32_TO_U16, I32_TO_I32, I32_TO_U32, I32_TO_I64, I32_TO_F32, I32_TO_F64, 
    U32_TO_I8, U32_TO_U8, U32_TO_I16, U32_TO_U16, U32_TO_I32, U32_TO_U32, U32_TO_I64, U32_TO_F32, U32_TO_F64, 
    I64_TO_I8, I64_TO_U8, I64_TO_I16, I64_TO_U16, I64_TO_I32, I64_TO_U32, I64_TO_I64, I64_TO_F32, I64_TO_F64, 
    F32_TO_I8, F32_TO_U8, F32_TO_I16, F32_TO_U16, F32_TO_I32, F32_TO_U32, F32_TO_I64, F32_TO_F32, F32_TO_F64, 
    F64_TO_I8, F64_TO_U8, F64_TO_I16, F64_TO_U16, F64_TO_I32, F64_TO_U32, F64_TO_I64, F64_TO_F32, F64_TO_F64, 
    ;

	public static UnaryOperatorType of( NativeType< ? > source, NativeType<?> target )
	{
		return of( OperandType.of( source ), OperandType.of( target ) );
	}

	public static UnaryOperatorType of( OperandType source, OperandType target )
	{
		switch ( source )
		{
        case I8:
            switch ( target)
            {
            case I8:
				return I8_TO_I8;
            case U8:
				return I8_TO_U8;
            case I16:
				return I8_TO_I16;
            case U16:
				return I8_TO_U16;
            case I32:
				return I8_TO_I32;
            case U32:
				return I8_TO_U32;
            case I64:
				return I8_TO_I64;
            case F32:
				return I8_TO_F32;
            case F64:
				return I8_TO_F64;
			default:
				throw new IllegalArgumentException();
			}
        case U8:
            switch ( target)
            {
            case I8:
				return U8_TO_I8;
            case U8:
				return U8_TO_U8;
            case I16:
				return U8_TO_I16;
            case U16:
				return U8_TO_U16;
            case I32:
				return U8_TO_I32;
            case U32:
				return U8_TO_U32;
            case I64:
				return U8_TO_I64;
            case F32:
				return U8_TO_F32;
            case F64:
				return U8_TO_F64;
			default:
				throw new IllegalArgumentException();
			}
        case I16:
            switch ( target)
            {
            case I8:
				return I16_TO_I8;
            case U8:
				return I16_TO_U8;
            case I16:
				return I16_TO_I16;
            case U16:
				return I16_TO_U16;
            case I32:
				return I16_TO_I32;
            case U32:
				return I16_TO_U32;
            case I64:
				return I16_TO_I64;
            case F32:
				return I16_TO_F32;
            case F64:
				return I16_TO_F64;
			default:
				throw new IllegalArgumentException();
			}
        case U16:
            switch ( target)
            {
            case I8:
				return U16_TO_I8;
            case U8:
				return U16_TO_U8;
            case I16:
				return U16_TO_I16;
            case U16:
				return U16_TO_U16;
            case I32:
				return U16_TO_I32;
            case U32:
				return U16_TO_U32;
            case I64:
				return U16_TO_I64;
            case F32:
				return U16_TO_F32;
            case F64:
				return U16_TO_F64;
			default:
				throw new IllegalArgumentException();
			}
        case I32:
            switch ( target)
            {
            case I8:
				return I32_TO_I8;
            case U8:
				return I32_TO_U8;
            case I16:
				return I32_TO_I16;
            case U16:
				return I32_TO_U16;
            case I32:
				return I32_TO_I32;
            case U32:
				return I32_TO_U32;
            case I64:
				return I32_TO_I64;
            case F32:
				return I32_TO_F32;
            case F64:
				return I32_TO_F64;
			default:
				throw new IllegalArgumentException();
			}
        case U32:
            switch ( target)
            {
            case I8:
				return U32_TO_I8;
            case U8:
				return U32_TO_U8;
            case I16:
				return U32_TO_I16;
            case U16:
				return U32_TO_U16;
            case I32:
				return U32_TO_I32;
            case U32:
				return U32_TO_U32;
            case I64:
				return U32_TO_I64;
            case F32:
				return U32_TO_F32;
            case F64:
				return U32_TO_F64;
			default:
				throw new IllegalArgumentException();
			}
        case I64:
            switch ( target)
            {
            case I8:
				return I64_TO_I8;
            case U8:
				return I64_TO_U8;
            case I16:
				return I64_TO_I16;
            case U16:
				return I64_TO_U16;
            case I32:
				return I64_TO_I32;
            case U32:
				return I64_TO_U32;
            case I64:
				return I64_TO_I64;
            case F32:
				return I64_TO_F32;
            case F64:
				return I64_TO_F64;
			default:
				throw new IllegalArgumentException();
			}
        case F32:
            switch ( target)
            {
            case I8:
				return F32_TO_I8;
            case U8:
				return F32_TO_U8;
            case I16:
				return F32_TO_I16;
            case U16:
				return F32_TO_U16;
            case I32:
				return F32_TO_I32;
            case U32:
				return F32_TO_U32;
            case I64:
				return F32_TO_I64;
            case F32:
				return F32_TO_F32;
            case F64:
				return F32_TO_F64;
			default:
				throw new IllegalArgumentException();
			}
        case F64:
            switch ( target)
            {
            case I8:
				return F64_TO_I8;
            case U8:
				return F64_TO_U8;
            case I16:
				return F64_TO_I16;
            case U16:
				return F64_TO_U16;
            case I32:
				return F64_TO_I32;
            case U32:
				return F64_TO_U32;
            case I64:
				return F64_TO_I64;
            case F32:
				return F64_TO_F32;
            case F64:
				return F64_TO_F64;
			default:
				throw new IllegalArgumentException();
			}
		default:
			throw new IllegalArgumentException();
        }
	}
}

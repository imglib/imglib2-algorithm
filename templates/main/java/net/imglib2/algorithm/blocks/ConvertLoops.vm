/*
 * #%L
 * ImgLib2: a general-purpose, multidimensional image processing library.
 * %%
 * Copyright (C) 2009 - 2023 Tobias Pietzsch, Stephan Preibisch, Stephan Saalfeld,
 * John Bogovic, Albert Cardona, Barry DeZonia, Christian Dietz, Jan Funke,
 * Aivar Grislis, Jonathan Hale, Grant Harris, Stefan Helfrich, Mark Hiner,
 * Martin Horn, Steffen Jaensch, Lee Kamentsky, Larry Lindsey, Melissa Linkert,
 * Mark Longair, Brian Northan, Nick Perry, Curtis Rueden, Johannes Schindelin,
 * Jean-Yves Tinevez and Michael Zinsmaier.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */
package net.imglib2.algorithm.blocks.convert;

import net.imglib2.algorithm.blocks.util.UnaryOperatorType;
import net.imglib2.util.Cast;

#parse( "PixelTypes.vm" )
#foreach( $t1 in $types )
import static net.imglib2.algorithm.blocks.convert.ConvertScalars.from_${t1};
import static net.imglib2.algorithm.blocks.convert.ConvertScalars.to_${t1};
import static net.imglib2.algorithm.blocks.convert.ConvertScalars.to_${t1}_clamp;
import static net.imglib2.algorithm.blocks.convert.ConvertScalars.to_${t1}_clamp_max;
#end

/*
 * This is autogenerated source code -- DO NOT EDIT. Instead, edit the
 * corresponding template in templates/ and rerun bin/generate.groovy.
 */

class ConvertLoops
{
    static < I, O > ConvertLoop< I, O > get( UnaryOperatorType type )
    {
        return get( type, ClampType.NONE );
    }

    static < I, O > ConvertLoop< I, O > get( UnaryOperatorType type, ClampType clampType )
    {
        switch ( clampType )
        {
        case NONE:
            switch( type )
            {
#foreach( $t1 in $types )
#foreach( $t2 in $types )
            case ${t1.toUpperCase()}_TO_${t2.toUpperCase()}: return Cast.unchecked( Convert_${t1}_to_${t2}.INSTANCE );
#end
#end
            default:
                throw new IllegalArgumentException();
            }
        case CLAMP:
            switch( type )
            {
#foreach( $t1 in $types )
#foreach( $t2 in $types )
            case ${t1.toUpperCase()}_TO_${t2.toUpperCase()}: return Cast.unchecked( Convert_${t1}_to_${t2}_clamp.INSTANCE );
#end
#end
            default:
                throw new IllegalArgumentException();
            }
        case CLAMP_MAX:
            switch( type )
            {
#foreach( $t1 in $types )
#foreach( $t2 in $types )
            case ${t1.toUpperCase()}_TO_${t2.toUpperCase()}: return Cast.unchecked( Convert_${t1}_to_${t2}_clamp_max.INSTANCE );
#end
#end
            default:
                throw new IllegalArgumentException();
            }
        default:
            throw new IllegalArgumentException();
        }
    }

#foreach( $t1 in $types )
#set( $sp1 = $storage_primitive[$t1] )
#foreach( $t2 in $types )
#set( $sp2 = $storage_primitive[$t2] )

	static class Convert_${t1}_to_${t2} implements ConvertLoop< ${sp1}[], ${sp2}[] >
	{
		static final Convert_${t1}_to_${t2} INSTANCE = new Convert_${t1}_to_${t2}();

		@Override
		public void apply( final ${sp1}[] src, final ${sp2}[] dest, final int length )
		{
			for ( int i = 0; i < length; ++i )
				dest[ i ] = to_$t2( from_$t1( src[ i ] ) );
		}
	}

	static class Convert_${t1}_to_${t2}_clamp implements ConvertLoop< ${sp1}[], ${sp2}[] >
	{
		static final Convert_${t1}_to_${t2}_clamp INSTANCE = new Convert_${t1}_to_${t2}_clamp();

		@Override
		public void apply( final ${sp1}[] src, final ${sp2}[] dest, final int length )
		{
			for ( int i = 0; i < length; ++i )
				dest[ i ] = to_${t2}_clamp( from_$t1( src[ i ] ) );
		}
	}

	static class Convert_${t1}_to_${t2}_clamp_max implements ConvertLoop< ${sp1}[], ${sp2}[] >
	{
		static final Convert_${t1}_to_${t2}_clamp_max INSTANCE = new Convert_${t1}_to_${t2}_clamp_max();

		@Override
		public void apply( final ${sp1}[] src, final ${sp2}[] dest, final int length )
		{
			for ( int i = 0; i < length; ++i )
				dest[ i ] = to_${t2}_clamp_max( from_$t1( src[ i ] ) );
		}
	}
#end
#end
}

/*
 * #%L
 * ImgLib2: a general-purpose, multidimensional image processing library.
 * %%
 * Copyright (C) 2009 - 2023 Tobias Pietzsch, Stephan Preibisch, Stephan Saalfeld,
 * John Bogovic, Albert Cardona, Barry DeZonia, Christian Dietz, Jan Funke,
 * Aivar Grislis, Jonathan Hale, Grant Harris, Stefan Helfrich, Mark Hiner,
 * Martin Horn, Steffen Jaensch, Lee Kamentsky, Larry Lindsey, Melissa Linkert,
 * Mark Longair, Brian Northan, Nick Perry, Curtis Rueden, Johannes Schindelin,
 * Jean-Yves Tinevez and Michael Zinsmaier.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */
package net.imglib2.algorithm.blocks.convert;

/*
 * This is autogenerated source code -- DO NOT EDIT. Instead, edit the
 * corresponding template in templates/ and rerun bin/generate.groovy.
 */

#parse( "PixelTypes.vm" )
class ConvertScalars
{
##
## from_i8(), etc., with corresponding compute_primitive as result type
##
    /*
     * Methods to convert each pixel type (i8, u8, i16, u16, i32, u32, i64, f32, f64)
     * to the corresponding primitive type used for computation.
     *
     * i8, u8, i16, u16, i32 are all converted to int, because java
     * computes in int for byte, short, and int operands.
     *
     * u32, i64 are converted to long, because that is the primitive type that
     * can represent all values of the pixel type.
     *
     * f32 is converted to float
     *
     * f64 is converted to double
     */
#foreach( $t in $types )
#set( $cp = $compute_primitive[$t] )
#set( $sp = $storage_primitive[$t] )
#set( $m = $mask[$t] )
	static $cp from_$t( $sp value ) { return value#if( $m ) & $m#end; }
#end
##
## to_i8(), etc., for int/long
##
#foreach( $cp in ["int", "long"] )

    /*
     * Methods to convert ${cp} values to each pixel type (i8, u8, i16, u16, i32, u32, i64, f32, f64).
     *
     * The basic to_u8() etc methods don't do any bounds-checking or clamping.
     * They only cast the argument to the output type.
     *
     * The to_u8_clamp() etc methods clamp the argument to the range of the
     * output type.
     *
     * The to_u8_clamp_max() etc methods clamp only to the upper bound output
     * range. This is useful for computations that could possibly overflow but
     * can never underflow (like summing unsigned values).
     */
#foreach( $t in $types )
#set( $sp = $storage_primitive[$t] )
#set( $max = $max_value[$t] )
#set( $min = $min_value[$t] )
#if( $nbits[$sp] >= $nbits[$cp] )
    static $sp to_${t}( $cp value ) { return value; }
#else
    static $sp to_${t}( $cp value ) { return ( $sp ) value; }
#end
#if( $max && !( $cp=="int" && $t=="i32" ) )
    static $sp to_${t}_clamp_max( $cp value ) { return to_${t}( Math.min( $max, value ) ); }
    static $sp to_${t}_clamp( $cp value ) { return to_${t}( Math.min( $max, Math.max( $min, value ) ) ); }
#else
    static $sp to_${t}_clamp_max( $cp value ) { return to_${t}( value ); }
    static $sp to_${t}_clamp( $cp value ) { return to_${t}( value ); }
#end
#end
#end
##
## to_i8(), etc., for float/double
## rounds and forward to int/long variants
##
#foreach( $cp in ["float", "double"] )

    /*
     * Methods to convert ${cp} values to each pixel type (i8, u8, i16, u16, i32, u32, i64, f32, f64).
     *
     * The basic to_u8() etc methods don't do any bounds-checking or clamping.
     * They round the argument and then cast to the output type.
     *
     * The to_u8_clamp() etc methods additionally clamp the argument to the
     * range of the output type.
     *
     * The to_u8_clamp_max() etc methods additionally clamp only to the upper
     * bound output range. This is useful for computations that could possibly
     * overflow but can never underflow (like summing unsigned values).
     */
#foreach( $t in $types )
#set( $sp = $storage_primitive[$t] )
#set( $no_rounding = ["f32", "f64"] )
#set( $double_rounding = ["u32", "i64"] )
#if( $cp.equals("float") && $double_rounding.contains($t) )
	static $sp to_${t}( $cp value ) { return to_${t}( Math.round( ( double ) value ) ); }
	static $sp to_${t}_clamp_max( $cp value ) { return to_${t}_clamp_max( Math.round( ( double ) value ) ); }
	static $sp to_${t}_clamp( $cp value ) { return to_${t}_clamp( Math.round( ( double ) value ) ); }
#elseif( $no_rounding.contains($t) )
	static $sp to_${t}( $cp value ) { return #if( $nbits[$sp] < $nbits[$cp] )( $sp ) #end value; }
	static $sp to_${t}_clamp_max( $cp value ) { return to_${t}( value ); }
	static $sp to_${t}_clamp( $cp value ) { return to_${t}( value ); }
#else
    static $sp to_${t}( $cp value ) { return to_${t}( Math.round( value ) ); }
	static $sp to_${t}_clamp_max( $cp value ) { return to_${t}_clamp_max( Math.round( value ) ); }
	static $sp to_${t}_clamp( $cp value ) { return to_${t}_clamp( Math.round( value ) ); }
#end
#end
#end
}

/*
 * #%L
 * ImgLib2: a general-purpose, multidimensional image processing library.
 * %%
 * Copyright (C) 2009 - 2024 Tobias Pietzsch, Stephan Preibisch, Stephan Saalfeld,
 * John Bogovic, Albert Cardona, Barry DeZonia, Christian Dietz, Jan Funke,
 * Aivar Grislis, Jonathan Hale, Grant Harris, Stefan Helfrich, Mark Hiner,
 * Martin Horn, Steffen Jaensch, Lee Kamentsky, Larry Lindsey, Melissa Linkert,
 * Mark Longair, Brian Northan, Nick Perry, Curtis Rueden, Johannes Schindelin,
 * Jean-Yves Tinevez and Michael Zinsmaier.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */
package net.imglib2.algorithm.blocks.convolve;

import net.imglib2.algorithm.blocks.util.OperandType;
import net.imglib2.util.Cast;

#parse( "PixelTypes.vm" )
#foreach( $t1 in $types )
import static net.imglib2.algorithm.blocks.convert.ConvertScalars.from_${t1};
import static net.imglib2.algorithm.blocks.convert.ConvertScalars.to_${t1};
import static net.imglib2.algorithm.blocks.convert.ConvertScalars.to_${t1}_clamp;
import static net.imglib2.algorithm.blocks.convert.ConvertScalars.to_${t1}_clamp_min;
#end

/*
 * This is autogenerated source code -- DO NOT EDIT. Instead, edit the
 * corresponding template in templates/ and rerun bin/generate.groovy.
 */

class SubtractLoops
{
	/**
	 * How to clamp values after subtraction.
	 */
	public enum ClampType
	{
		/**
		 * don't clamp
		 */
		NONE,

		/**
		 * clamp to lower and upper bound
		 */
		CLAMP,

		/**
		 * clamp only to lower bound
		 */
		CLAMP_MIN;
	}

	static < I > SubtractLoop< I > get( OperandType type )
	{
		return get( type, ClampType.NONE );
	}

	static < I > SubtractLoop< I > get( OperandType type, ClampType clampType )
	{
		switch ( clampType )
		{
		case NONE:
			switch ( type )
			{
#foreach( $t1 in $types )
			case ${t1.toUpperCase()}: return Cast.unchecked( Subtract_${t1}.INSTANCE );
#end
			default:
				throw new IllegalArgumentException();
			}
		case CLAMP:
			switch ( type )
			{
#foreach( $t1 in $types )
				case ${t1.toUpperCase()}: return Cast.unchecked( Subtract_${t1}_clamp.INSTANCE );
#end
			default:
				throw new IllegalArgumentException();
			}
		case CLAMP_MIN:
			switch ( type )
			{
#foreach( $t1 in $types )
				case ${t1.toUpperCase()}: return Cast.unchecked( Subtract_${t1}_clamp_min.INSTANCE );
#end
			default:
				throw new IllegalArgumentException();
			}
		default:
			throw new IllegalArgumentException();
		}
	}

#foreach( $t1 in $types )
#set( $sp1 = $storage_primitive[$t1] )
	static class Subtract_${t1} implements SubtractLoop< ${sp1}[] >
	{
		static final Subtract_${t1} INSTANCE = new Subtract_${t1}();

		@Override
		public void apply( final ${sp1}[] src0, final ${sp1}[] src1, final ${sp1}[] dest, final int length )
		{
			for ( int i = 0; i < length; ++i )
				dest[ i ] = to_${t1}( from_${t1}( src0[ i ] ) - from_${t1}( src1[ i ] ) );
		}
	}

	static class Subtract_${t1}_clamp implements SubtractLoop< ${sp1}[] >
	{
		static final Subtract_${t1}_clamp INSTANCE = new Subtract_${t1}_clamp();

		@Override
		public void apply( final ${sp1}[] src0, final ${sp1}[] src1, final ${sp1}[] dest, final int length )
		{
			for ( int i = 0; i < length; ++i )
				dest[ i ] = to_${t1}_clamp( from_${t1}( src0[ i ] ) - from_${t1}( src1[ i ] ) );
		}
	}

	static class Subtract_${t1}_clamp_min implements SubtractLoop< ${sp1}[] >
	{
		static final Subtract_${t1}_clamp_min INSTANCE = new Subtract_${t1}_clamp_min();

		@Override
		public void apply( final ${sp1}[] src0, final ${sp1}[] src1, final ${sp1}[] dest, final int length )
		{
			for ( int i = 0; i < length; ++i )
				dest[ i ] = to_${t1}_clamp_min( from_${t1}( src0[ i ] ) - from_${t1}( src1[ i ] ) );
		}
	}

#end
}

/*
 * #%L
 * ImgLib2: a general-purpose, multidimensional image processing library.
 * %%
 * Copyright (C) 2009 - 2021 Tobias Pietzsch, Stephan Preibisch, Stephan Saalfeld,
 * John Bogovic, Albert Cardona, Barry DeZonia, Christian Dietz, Jan Funke,
 * Aivar Grislis, Jonathan Hale, Grant Harris, Stefan Helfrich, Mark Hiner,
 * Martin Horn, Steffen Jaensch, Lee Kamentsky, Larry Lindsey, Melissa Linkert,
 * Mark Longair, Brian Northan, Nick Perry, Curtis Rueden, Johannes Schindelin,
 * Jean-Yves Tinevez and Michael Zinsmaier.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */
package net.imglib2.algorithm.binary;

import java.util.function.BiConsumer;

import net.imglib2.img.Img;
import net.imglib2.img.ImgFactory;
import net.imglib2.loops.LoopBuilder;
import net.imglib2.parallel.Parallelization;
import net.imglib2.type.Type;
import net.imglib2.type.logic.BitType;

/**
 * Collection of static utilities meant to generate {@link BitType} images from
 * {@link Comparable} images.
 *
 * @author Jean-Yves Tinevez
 */
public class Thresholder
{

	/**
	 * Returns a new boolean {@link Img} generated by thresholding the values of
	 * the source image.
	 *
	 * @param source
	 *            the image to threshold.
	 * @param threshold
	 *            the threshold.
	 * @param above
	 *            if {@code true}, the target value will be true for source
	 *            values above the threshold, {@code false} otherwise.
	 * @param numThreads
	 *            the number of threads to use for thresholding.
	 * @return a new {@link Img} of type {@link BitType} and of same dimension
	 *         that the source image.
	 */
	public static final < T extends Type< T > & Comparable< T >> Img< BitType > threshold( final Img< T > source, final T threshold, final boolean above, final int numThreads )
	{
		return Parallelization.runWithNumThreads( numThreads,
				() -> threshold( source, threshold, above ) );
	}

	/**
	 * Returns a new boolean {@link Img} generated by thresholding the values of
	 * the source image.
	 *
	 * @param source
	 *            the image to threshold.
	 * @param threshold
	 *            the threshold.
	 * @param above
	 *            if {@code true}, the target value will be true for source
	 *            values above the threshold, {@code false} otherwise.
	 * @return a new {@link Img} of type {@link BitType} and of same dimension
	 *         that the source image.
	 */
	public static < T extends Type< T > & Comparable< T > > Img< BitType > threshold( Img< T > source, T threshold, boolean above )
	{
		final ImgFactory< BitType > factory = source.factory().imgFactory( new BitType() );
		final Img< BitType > target = factory.create( source );
		final BiConsumer< T, BitType > converter = getThresholdConverter( threshold, above );
		LoopBuilder.setImages( source, target ).multiThreaded().forEachPixel( converter );
		return target;
	}

	private static < T extends Type< T > & Comparable< T > > BiConsumer< T, BitType > getThresholdConverter( T threshold, boolean above )
	{
		if ( above )
			return ( input, output ) -> output.set( input.compareTo( threshold ) > 0 );
		else
			return ( input, output ) -> output.set( input.compareTo( threshold ) < 0 );
	}

}
